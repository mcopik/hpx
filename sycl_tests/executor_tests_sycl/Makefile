# one needs to update this variables before compiling!
BOOST_ROOT=/usr/lib/x86_64-linux-gnu/
HPX_SOURCE=/home/mcopik/Projekty/hpx/hpx/hpx
HPX_BUILD=/home/mcopik/Projekty/hpx/hpx/build_gcc


SYCL_CXX=/opt/ComputeCpp-15.10-Linux/sample_code/../bin/compute++
SYCL_INCLUDE=-I /opt/ComputeCpp-15.10-Linux/include/
SYCL_FLAGS=-sycl -intelspirmetadata -emit-llvm -D__DEVICE_SPIR32__ -DBUILD_PLATFORM_SPIR $(SYCL_INCLUDE)
SYCL_CXX_FLAGS=-DBUILD_PLATFORM_SPI
SYCL_LDFLAGS=-rdynamic /opt/ComputeCpp-15.10-Linux/lib/libSYCL.so /usr/local/cuda/lib64/libOpenCL.so -Wl,-rpath,/opt/ComputeCpp-15.05-Linux/lib:/usr/local/cuda/lib64

# HPX flags taken directly from commands generated by CMake
CXX=/usr/bin/g++-5
HPX_CXXFLAGS=-DHPX_WITH_SYCL -DHPX_APPLICATION_EXPORTS -DHPX_APPLICATION_NAME=foreach_test_exe -DHPX_APPLICATION_STRING="\"foreach_test_exe\"" -DHPX_PREFIX="\"/home/mcopik/Projekty/hpx/hpx_build_clang\"" -D_GNU_SOURCE -fno-builtin-cfree -fno-builtin-pvalloc -fno-builtin-malloc -fno-builtin-free -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-valloc -fno-builtin-memalign -fno-builtin-posix_memalign -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-sign-promo -Wno-attributes -Wno-cast-align -Wno-unused-parameter -Wno-ignored-qualifiers -Wformat=2 -Wno-format-nonliteral -Winit-self -Wcast-qual -Werror=parentheses -Werror=sequence-point -Werror=format -Werror=missing-braces  -fdiagnostics-show-option -Werror=vla -Wno-cast-align -O3 -DNDEBUG -DHPX_DISABLE_ASSERTS -DBOOST_DISABLE_ASSERTS
HPX_INCLUDES= -I$(HPX_SOURCE) -I$(HPX_BUILD) -I$(HPX_SOURCE)/external/serialization -I$(HPX_SOURCE)/external/cache -I$(HPX_SOURCE)/external/endian -I$(HPX_SOURCE)/examples -I$(HPX_SOURCE)/tests

SRCS=executor_test.cpp
OBJS=$(SRCS:%.cpp=%.o)
OBJS_SYCL=$(SRCS:%.cpp=%.cpp.bc)
$(info $(OBJS))

# linking flags
# taken directly from CMake generated commands
# direct linking to shared libraries overrides system default - we need to use boost compiled against libc++
BOOST_LDFLAGS=-L$(BOOST_ROOT) -lboost_chrono -lboost_date_time -lboost_filesystem -lboost_program_options -lboost_regex -lboost_system -lboost_thread $(BOOST_ROOT)/libboost_chrono.so $(BOOST_ROOT)/libboost_date_time.so $(BOOST_ROOT)/libboost_filesystem.so $(BOOST_ROOT)/libboost_program_options.so $(BOOST_ROOT)/libboost_regex.so $(BOOST_ROOT)/libboost_system.so $(BOOST_ROOT)/libboost_thread.so $(BOOST_ROOT)/libboost_context.so $(BOOST_ROOT)/libboost_random.so $(BOOST_ROOT)/libboost_atomic.so -Wl,-rpath,$(HPX_BUILD)/lib:$(BOOST_ROOT): 
HPX_LDFLAGS=-L$(HPX_BUILD)/lib -rdynamic $(HPX_BUILD)/lib/libhpx.so.0.9.12 $(HPX_BUILD)/lib/libhpx_init.a
LDFLAGS= -O3 -g

TARGET_DIR=../bin
TARGET=$(TARGET_DIR)/executor_test

$(TARGET): dirs $(OBJS_SYCL) $(OBJS) 
	$(CXX) -g -o $(TARGET) $(OBJS) $(LDFLAGS) $(SYCL_LDFLAGS) $(HPX_LDFLAGS) $(BOOST_LDFLAGS)

all:    $(TARGET)

$(OBJS_SYCL): %.cpp.bc : %.cpp
	$(SYCL_CXX) $(SYCL_FLAGS) $(HPX_CXXFLAGS) $(HPX_INCLUDES) -c $< -o $@

$(OBJS): %.o : %.cpp
	$(CXX) -g $(HPX_CXXFLAGS) $(HPX_INCLUDES) $(SYCL_CXX_FLAGS) $(AMP_CXXFLAGS) $(SYCL_INCLUDE) -include $<.sycl -c $<  -o $@

dirs:	$(TARGET_DIR)

$(TARGET_DIR):
	mkdir -p $(TARGET_DIR)

clean:
	rm -f $(HPX_OBJS) $(TARGET) $(AMP_OBJS)

