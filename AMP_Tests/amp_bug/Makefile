# one needs to update this variables before compiling!
BOOST_ROOT=/home/mcopik/Projekty/steiar/boost_1_58_0/
AMP_SOURCE=/home/mcopik/Projekty/hpx/cppamp-driver-ng-35
AMP_BUILD=/home/mcopik/Projekty/hpx/build
HPX_SOURCE=/home/mcopik/Projekty/steiar/hpx/
HPX_BUILD=/home/mcopik/Projekty/steiar/hpx_build_libcc_35

LIBCXX_CXXFLAGS=-stdlib=libc++ -I $(AMP_SOURCE)/libc++/libcxx/include/ -I $(AMP_SOURCE)/libc++/libcxxrt/src/
LIBCXX_LDFLAGS=-stdlib=libc++ -L$(AMP_BUILD)/libc++/libcxx/lib -L$(AMP_BUILD)/libc++/libcxxrt/lib -Wl,--rpath=$(AMP_BUILD)/build/Release/lib:$(AMP_BUILD)/libc++/libcxx/lib:$(AMP_BUILD)/libc++/libcxxrt/lib -lc++ -lcxxrt

# HPX flags taken directly from commands generated by CMake
CXX=$(AMP_BUILD)/compiler/bin/clang++
HPX_CXXFLAGS=$(LIBCXX_CXXFLAGS) -DHPX_APPLICATION_EXPORTS -DHPX_APPLICATION_NAME=foreach_test_exe -DHPX_APPLICATION_STRING="\"foreach_test_exe\"" -DHPX_PREFIX="\"/home/mcopik/Projekty/hpx/hpx_build_clang\"" -D_GNU_SOURCE -fno-builtin-cfree -fno-builtin-pvalloc -fno-builtin-malloc -fno-builtin-free -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-valloc -fno-builtin-memalign -fno-builtin-posix_memalign -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-sign-promo -Wno-attributes -Wno-cast-align -Wno-unused-parameter -Wno-ignored-qualifiers -Wformat=2 -Wno-format-nonliteral -Winit-self -Wcast-qual -Werror=parentheses -Werror=reorder -Werror=return-type -Werror=sequence-point -Werror=format -Werror=missing-braces -Werror=sign-compare -fdiagnostics-show-option -Werror=vla -Werror=return-type -Wno-cast-align -O3 -DNDEBUG -DHPX_DISABLE_ASSERTS -DBOOST_DISABLE_ASSERTS
HPX_INCLUDES= -I$(HPX_SOURCE) -I$(HPX_BUILD) -I$(HPX_SOURCE)/external/serialization -I$(HPX_SOURCE)/external/cache -I$(HPX_SOURCE)/external/endian -I$(HPX_SOURCE)/examples -I$(HPX_SOURCE)/tests
HPX_OBJS = $(HPX_SRCS:%.cpp=%.o)

# AMP flags
AMP_CXXFLAGS=$(LIBCXX_CXXFLAGS) -std=c++amp -O3
AMP_INCLUDES=-I$(AMP_SOURCE)/include
AMP_SRCS=amp_bug.cpp
AMP_OBJS=$(AMP_SRCS:%.cpp=%.o)

# linking flags
# taken directly from CMake generated commands
# direct linking to shared libraries overrides system default - we need to use boost compiled against libc++
BOOST_LDFLAGS=-L$(BOOST_ROOT)/lib -lboost_chrono -lboost_date_time -lboost_filesystem -lboost_program_options -lboost_regex -lboost_system -lboost_thread $(BOOST_ROOT)/lib/libboost_chrono.so $(BOOST_ROOT)/lib/libboost_date_time.so $(BOOST_ROOT)/lib/libboost_filesystem.so $(BOOST_ROOT)/lib/libboost_program_options.so $(BOOST_ROOT)/lib/libboost_regex.so $(BOOST_ROOT)/lib/libboost_system.so $(BOOST_ROOT)/lib/libboost_thread.so $(BOOST_ROOT)/lib/libboost_context.so $(BOOST_ROOT)/lib/libboost_random.so $(BOOST_ROOT)/lib/libboost_atomic.so -Wl,-rpath,$(HPX_BUILD)/lib:$(BOOST_ROOT)/lib: 
HPX_LDFLAGS=-L$(HPX_BUILD)/lib -rdynamic $(HPX_BUILD)/lib/libhpx.so.0.9.11 $(HPX_BUILD)/lib/libhpx_init.a
AMP_LDFLAGS=-L$(AMP_BUILD)/build/Release/lib -ldl -lpthread -Wl,--whole-archive -lmcwamp -Wl,--no-whole-archive
LDFLAGS=-std=c++amp -O3 $(LIBCXX_LDFLAGS)

TARGET_DIR=../bin
TARGET=$(TARGET_DIR)/amp_bug

$(TARGET): dirs $(HPX_OBJS) $(AMP_OBJS)
	$(CXX) -o $(TARGET) $(HPX_OBJS) $(AMP_OBJS) $(LDFLAGS) $(AMP_LDFLAGS)

all:    $(TARGET)

$(HPX_OBJS): %.o : %.cpp
	$(CXX) $(HPX_CXXFLAGS) $(HPX_INCLUDES) -c $<  -o $@

$(AMP_OBJS): %.o : %.cpp
	$(CXX) $(AMP_CXXFLAGS) $(AMP_INCLUDES) -c $<  -o $@

dirs:	$(TARGET_DIR)

$(TARGET_DIR):
	mkdir -p $(TARGET_DIR)

clean:
	rm -f $(HPX_OBJS) $(TARGET) $(AMP_OBJS)

